# foundation.sylva
#
# foundation.sylva provides the most basic class and functions for sylva-runtime
#
# Created by Ryan Guo<ryan@islandzero.net> on 2016/9/27.
#

#! #include<math.h>

########################################################################################################################
# Number
########################################################################################################################

# Number, virtual class for all primitive types, including integer, float, boolean and nil
#
class Number
  # initializer for 'Number.new', does nothing
  # TODO: add init from string
  func init
    return self
  end

  ####################################################
  # Operations
  ####################################################

  # not operator
  #
  # convert to boolean and returns inverted boolean value
  # alias to 'not' function name

  func !
    #! sylva_assert(arguments.length == 0, "wrong number of arguments for operator !, expecting 0, got %ld", arguments.length);
    #! return sylva_boolean_value(!sylva_to_boolean(self));
  end

  # add operator
  #
  # alias to 'add' function name, support add multiple values

  func +(b)  # alias to `add`
    #! sylva_assert(arguments.length > 0, "wrong number of arguments for operator +, expecting >= 1, got 0");
    #! sylva_trans_to_numeric(&self);

    # iterate over arguments
    #! for (sylva_index i = 0; i < arguments.length; i++) {
    #!   sylva_value arg = arguments.values[i];
    #!   sylva_trans_to_numeric(&arg);
    #!   switch (arg.type) {
    #!   case sylva_type_integer: {
    #      # float + integer, integer + integer
    #!     if (self.type == sylva_type_float) {
             self.float_value += arg.integer_value;
    #!     } else {
    #!       self.integer_value += arg.integer_value;
    #!     }
    #!   }
    #!  break;
    #! case sylva_type_float: {
    #!  //  integer + float, convert self to float and continue
    #!  sylva_trans_to_float(&self);
    #!  //  float + float
    #!  self.float_value += arg.float_value;
    #! }
    #!  break;
    #!  default:break;
    #!  }
    #!  }
    #! return self;
  end

  native func -(b)  # alias to `sub`
  native func *(b)  # alias to `mul`
  native func /(b)  # alias to `div`
  native func %(b)  # alias to `mod`

  native func <>(b) # alias to `compare`, returns sylva_comparison_result
  native func <(b)  # alias to `lt`, bridged to `compare`, returns sylva_boolean
  native func >(b)  # alias to `gt`, bridged to `compare`, returns sylva_boolean
  native func <=(b) # alias to `lt_eq`, bridged to `compare`, returns sylva_boolean
  native func >=(b) # alias to `gt_eq`, bridged to `compare`, returns sylva_boolean
  native func ==(b) # alias to `eq`, bridged to `compare`, returns sylva_boolean
  native func !=(b) # alias to `not_eq`, bridged to `compare`, returns sylva_boolean

  native func ||(b) # alias to `or`, bridged with `sylva_to_boolean`
  native func &&(b) # alias to `and`, bridged with `sylva_to_boolean`

  native func |(b)  # alias to `bit_or`
  native func &(b)  # alias to `bit_and`
  native func ^(b)  # alias to `bit_xor`
  native func >>(b) # alias to `rshift`
  native func <<(b) # alias to `lshift`
  # Others
  native func abs
  # Common
  native func to_s  # create string representation
end

########################################################################################################################
# Object
########################################################################################################################

# Object, default super class of all other classes
#
class Object
  # default initializer, does nothing
  native func init
  # virtual deinitializer , does nothing
  native func deinit
  # Get the class
  native func class
  # Compare two object, default implement compares pointer
  native func ==(b)
end

########################################################################################################################
# String
########################################################################################################################

# String
#
class String
  # internal char*
  var internal
  var length
end