# number.sylva
#
# provide operations for primitive types
#
# Create by Ryan Guo<ryan@islandzero.net> on 2016/10/04

` #include<math.h>

# Number, virtual class for all primitive types, including integer, float, boolean and nil
#
class Number

  # initializer for 'Number.new', does nothing
  # TODO: add init from string
  func init
    return self
  end

  ####################################################
  # Operations
  ####################################################

  # not operator
  #
  # convert to boolean and returns inverted boolean value
  # alias to 'not' function name

  func !
    ` sl_assert(arguments.length == 0, "wrong number of arguments for operator !, expecting 0, got %ld", arguments.length);
    ` return sl_boolean_value(!sl_to_boolean(self));
  end

  # add operator
  #
  # alias to 'add' function name, support add multiple values

  func +
    ` sl_assert(arguments.length > 0, "wrong number of arguments for operator +, expecting >= 1, got 0");
    ` sl_trans_to_numeric(&self);
    ` // iterate over arguments
    ` for (sl_index i = 0; i < arguments.length; i++) {
    `   sl_value arg = arguments.values[i];
    `   sl_trans_to_numeric(&arg);
    `   switch (arg.type) {
    `   case sl_type_integer: {
    `     // float + integer, integer + integer
    `     if (self.type == sl_type_float) {
    `       self.value.as_float += arg.value.as_integer;
    `     } else {
    `       self.value.as_integer += arg.value.as_integer;
    `     }
    `   }
    `   break;
    `   case sl_type_float: {
    `     //  integer + float, convert self to float and continue
    `     sl_trans_to_float(&self);
    `     //  float + float
    `     self.value.as_float += arg.value.as_float;
    `   }
    `   break;
    `   default:break;
    `   }
    ` }
    ` return self;
  end

  # substract operator
  #
  # alias to function name 'sub'
  # when no arguments are given, returns the reverted value, else returns the minus value

  func -
    ` sl_trans_to_numeric(&self);
    ` //  arguments count == 0, i.e prefix `-` operator
    ` if (arguments.length == 0) {
    `   switch (self.type) {
    `     //  integer
    `   case sl_type_integer: {
    `     self.value.as_integer = -self.value.as_integer;
    `   }
    `     break;
    `     //  float
    `   case sl_type_float: {
    `     self.value.as_float = -self.value.as_float;
    `   }
    `     break;
    `   default:break;
    `   }
    `   return self;
    ` } else {
    `   //  arguments count != 0, i.e infix `-` operator
    `   for (sl_index i = 0; i < arguments.length; i++) {
    `     //  get the reverted value by recursively invoke SYLVA_Number_I_sub
    `     sl_value reverted = SYLVA_Number_I_sub(arguments.values[i], sl_args_empty);
    `     //  add the reverted value
    `     self = SYLVA_Number_I_add(self, sl_args_make(1, reverted));
    `   }
    `   return self;
    ` }
  end

  # multiply operator
  #
  # support multiple number multiply
  # alias to function name 'mul'

  func *
    ` sl_assert(arguments.length > 0, "wrong number of arguments for operator *, expecting >= 1, got 0");
    ` sl_trans_to_numeric(&self);
    ` for (sl_index i = 0; i < arguments.length; i++) {
    `   sl_value arg = arguments.values[i];
    `   sl_trans_to_numeric(&arg);
    `   switch (arg.type) {
    `   case sl_type_integer: {
    `     //  float * integer
    `     if (self.type == sl_type_float) {
    `       self.value.as_float *= arg.value.as_integer;
    `     }
    `     // integer * integer
    `     if (self.type == sl_type_integer) {
    `       self.value.as_integer *= arg.value.as_integer;
    `     }
    `   }
    `     break;
    `   case sl_type_float: {
    `     //  integer * float
    `     sl_trans_to_float(&self);
    `     //  float * float
    `     if (self.type == sl_type_float) {
    `       self.value.as_float *= arg.value.as_float;
    `     }
    `   }
    `     break;
    `   default:break;
    `   }
    ` }
    ` return self;
  end

  # divide operator
  #
  # support multiple arguments
  # alias to function name 'div'
  func /
    ` sl_assert(arguments.length > 0, "wrong number of arguments for operator *, expecting >= 1, got 0");
    ` sl_trans_to_numeric(&self);
    ` for (sl_index i = 0; i < arguments.length; i++) {
    `   sl_value arg = arguments.values[i];
    `   sl_trans_to_numeric(&arg);
    `   switch (arg.type) {
    `   case sl_type_integer: {
    `     //  float * integer
    `     if (self.type == sl_type_float) {
    `       self.value.as_float *= arg.value.as_integer;
    `     }
    `     // integer * integer
    `     if (self.type == sl_type_integer) {
    `       self.value.as_integer *= arg.value.as_integer;
    `     }
    `   }
    `     break;
    `   case sl_type_float: {
    `     //  integer * float
    `     sl_trans_to_float(&self);
    `     //  float * float
    `     if (self.type == sl_type_float) {
    `       self.value.as_float *= arg.value.as_float;
    `     }
    `   }
    `     break;
    `   default:break;
    `   }
    ` }
    ` return self;
  end

  # mod operator
  #
  # alias to function name 'mod'
  func %(b)
    ` sl_trans_to_numeric(&self);
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator %%, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` sl_trans_to_numeric(&value);
    ` if (value.type == sl_type_integer) {
    `   if (self.type == sl_type_float) {
    `     return sl_float_value(fmod(self.value.as_float, (sl_float) value.value.as_integer));
    `   } else {
    `     return sl_integer_value(self.value.as_integer % value.value.as_integer);
    `   }
    ` } else {
    `   if (self.type == sl_type_float) {
    `     return sl_float_value(fmod(self.value.as_float, value.value.as_float));
    `   } else {
    `     return sl_integer_value(self.value.as_integer % (sl_integer) value.value.as_float);
    `   }
    ` }
  end

  # compare operator
  #
  # alias to function name 'compare'
  func <>
    ` sl_trans_to_numeric(&self);
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator <>, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` sl_trans_to_numeric(&value);
    ` if (value.type == sl_type_integer) {
    `   if (self.type == sl_type_float) {
    `     return sl_integer_value(sl_compare(self.value.as_float, value.value.as_integer));
    `   } else {
    `     return sl_integer_value(sl_compare(self.value.as_integer, value.value.as_integer));
    `   }
    ` } else {
    `   if (self.type == sl_type_float) {
    `     return sl_integer_value(sl_compare(self.value.as_float, value.value.as_float));
    `   } else {
    `     return sl_integer_value(sl_compare(self.value.as_integer, value.value.as_float));
    `   }
    ` }
  end

  # lesser than operator, bridged to 'compare'
  #
  # alias to function name 'lt'
  func <
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator <, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value result = SYLVA_Number_I_compare(self, arguments);
    ` return sl_boolean_value(result.value.as_integer == sl_ascending);
  end

  # greater than operator, bridged to 'compare'
  #
  # alias to function name 'gt'
  func >
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator >, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value result = SYLVA_Number_I_compare(self, arguments);
    ` return sl_boolean_value(result.value.as_integer == sl_descending);
  end

  # lesser than or equal to, bridged to 'compare'
  #
  # alias to function name 'lt_eq'
  func <=
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator <=, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value result = SYLVA_Number_I_compare(self, arguments);
    ` return sl_boolean_value(result.value.as_integer == sl_ascending || result.value.as_integer == sl_same);
  end

  # greater than or equal to, bridged to 'compare'
  #
  # alias to function name 'gt_eq'
  func >=
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator >=, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value result = SYLVA_Number_I_compare(self, arguments);
    ` return sl_boolean_value(result.value.as_integer == sl_descending || result.value.as_integer == sl_same);
  end

  # equal to operator, bridged to 'compare'
  #
  # alias to function named 'eq'
  func ==
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator ==, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value result = SYLVA_Number_I_compare(self, arguments);
    ` return sl_boolean_value(result.value.as_integer == sl_same);
  end

  # not equal to operator, bridged to 'compare'
  #
  # alias to function named 'not_eq'
  func !=
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator !=, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value result = SYLVA_Number_I_compare(self, arguments);
    ` return sl_boolean_value(result.value.as_integer != sl_same);
  end

  # or operator, bridged to 'sl_to_boolean'
  #
  # alias to function name 'or'
  func ||
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator ||, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` return sl_boolean_value(sl_to_boolean(self) || sl_to_boolean(value));
  end

  # and operator, bridged to 'sl_to_boolean'
  #
  # alias to function name 'and'
  func &&
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator &&, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` return sl_boolean_value(sl_to_boolean(self) && sl_to_boolean(value));
  end

  # bit or operator
  #
  # alias to function name 'bit_or'
  func |
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator |, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` sl_trans_to_integer(&self);
    ` sl_trans_to_integer(&value);
    ` return sl_integer_value(self.value.as_integer | value.value.as_integer);
  end

  # bit and operator
  #
  # alias to function name 'bit_and'
  func &
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator &, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` sl_trans_to_integer(&self);
    ` sl_trans_to_integer(&value);
    ` return sl_integer_value(self.value.as_integer & value.value.as_integer);
  end

  # xor operator
  #
  # alias to function name 'bit_xor'
  func ^
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator ^, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` sl_trans_to_integer(&self);
    ` sl_trans_to_integer(&value);
    ` return sl_integer_value(self.value.as_integer ^ value.value.as_integer);
  end

  # right shift operator
  #
  # alias to function name 'rshift'
  func >>
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator >>, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` sl_trans_to_integer(&self);
    ` sl_trans_to_integer(&value);
    ` return sl_integer_value(self.value.as_integer >> value.value.as_integer);
  end

  # left shift operator
  #
  # alias to function name 'lshift'
  func <<
    ` sl_assert(arguments.length == 1,
    `           "wrong number of arguments for operator <<, expecting 1, got %ld",
    `           arguments.length);
    ` sl_value value = arguments.values[0];
    ` sl_trans_to_integer(&self);
    ` sl_trans_to_integer(&value);
    ` return sl_integer_value(self.value.as_integer << value.value.as_integer);
  end

  func ~
    # TODO: implement
  end

  ####################################################
  # Convert
  ####################################################

  # convert to integer type

  func to_i
    ` sl_assert(arguments.length == 0,
    `           "wrong number of arguments for function 'to_i', expecting 0, got %ld",
    `           arguments.length);
    ` sl_trans_to_integer(&self);
    ` return self;
  end

  # convert to float type
  func to_f
    ` sl_assert(arguments.length == 0,
    `           "wrong number of arguments for function 'to_f', expecting 0, got %ld",
    `           arguments.length);
    ` sl_trans_to_float(&self);
    ` return self;
  end

  # convert to boolean type

  func to_b
    ` sl_assert(arguments.length == 0,
    `           "wrong number of arguments for function 'to_b', expecting 0, got %ld",
    `           arguments.length);
    ` sl_trans_to_boolean(&self);
    ` return self;
  end

  native func to_s  # TODO: implement

  ####################################################
  # Others
  ####################################################

  func abs
    ` if (self.type == sl_type_float) {
    `   return sl_float_value(fabs(self.value.as_float));
    ` } else if (self.type == sl_type_integer) {
    `   return sl_integer_value(labs(self.value.as_integer));
    ` } else {
    `   return self;
    ` }
  end

end

